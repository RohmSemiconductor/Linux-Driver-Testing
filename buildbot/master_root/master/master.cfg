# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

from configs.passwords import *


### Helper variables
tag_change = lambda ref: ref.startswith('refs/tags/')

build_arm32 = 'make -j8 ARCH=arm CROSS_COMPILE=/home/user01/tools/beagle-dev-tools/bb-compiler/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf- LOADADDR=0x80008000'

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

###### PROJECTS
# To trigger gitpoller on tag changes, use tag_change instead of ['branch_name'] in the 'branches'

projects = {}

projects['test_linux']= {
    'name': 'test_linux',
    #'branches': ['test_linux'],
    'branches': tag_change,
    'repo_git': 'https://github.com/RohmSemiconductor/Linux-Driver-Testing.git',
    'polling': 60,
}

builders = {}

builders['builder_test_linux']= {
    'name': "builder_test_linux",
    'workernames': ["worker1"],
    'factory': "factory",
}
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("worker1", worker1pass)]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

def get_gitpoller(project_name, workdir):
    return changes.GitPoller(
        projects[project_name]['repo_git'],
        project=projects[project_name]['name'],
        workdir=workdir,
        branches=projects[project_name]['branches'],
        #buildPushesWithNoCommits=True,
        pollAtLaunch=True,
        pollinterval=projects[project_name]['polling'],
        )

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

c['change_source'].append(get_gitpoller('test_linux', 'gitpoller-workdir-test_linux'))

# c['change_source'].append(changes.GitPoller(
#         'https://github.com/RohmSemiconductor/Linux-Driver-Testing.git',
#         workdir='gitpoller-workdir', branches=['test_linux'],
#         pollInterval=300))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#                             name="all",
#                             change_filter=util.ChangeFilter(branch='master'),
#                             treeStableTimer=None,
#                             builderNames=["runtests"]))
# c['schedulers'].append(schedulers.ForceScheduler(
#                             name="force",
#                             builderNames=["runtests"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                                name="scheduler-test_linux",
                                change_filter=util.ChangeFilter(
                                project=projects['test_linux']['name']),
                                treeStableTimer=None, 
                                builderNames=["builder_test_linux"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# def get_builder(project_name, workdir):
#     return util.BuilderConfig(
#         projects[project_name]['repo_git'],
#         name=projects[project_name]['name'],
#         workdir=workdir,
#         branches=projects[project_name]['branches'],
#         #buildPushesWithNoCommits=True,
#         pollAtLaunch=True,
#         pollinterval=projects[project_name]['polling'],
#         )

# factory = util.BuildFactory()
# # check out the source
# factory.addStep(steps.Git(repourl='https://github.com/buildbot/hello-world.git', mode='incremental'))
# # run the tests (note that this will require that 'trial' is installed)
# factory.addStep(steps.ShellCommand(command=["trial", "hello"],
#                                    env={"PYTHONPATH": "."}))

#factory.addStep(steps.FileUpload(workersrc='.', masterdest='~/nfs', mode=0o755)) #example that sets permissions

factory_test_linux = util.BuildFactory()
factory_test_linux.addStep(steps.Git(repourl='https://github.com/RohmSemiconductor/Linux-Driver-Testing.git', branch='test_linux', mode='full',name="Update source files from git"))
factory_test_linux.addStep(steps.FileDownload(mastersrc="~/tools/kernel/.config",workerdest=".config",name="Copy kernel config to build directory"))
factory_test_linux.addStep(steps.ShellCommand(command=["make", "-j8", "ARCH=arm", "CROSS_COMPILE=/home/user01/tools/beagle-dev-tools/bb-compiler/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-", "LOADADDR=0x80008000", "olddefconfig"],name="Update kernel config if needed"))
factory_test_linux.addStep(steps.ShellCommand(command=["make", "-j8", "ARCH=arm", "CROSS_COMPILE=/home/user01/tools/beagle-dev-tools/bb-compiler/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-", "LOADADDR=0x80008000"],name="Build kernel binaries"))
factory_test_linux.addStep(steps.ShellCommand(command=["make", "-j8", "ARCH=arm", "CROSS_COMPILE=/home/user01/tools/beagle-dev-tools/bb-compiler/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-", "LOADADDR=0x80008000", "INSTALL_MOD_PATH=/home/user01/nfs"],name="Install kernel modules"))
# factory_test_linux.addStep(steps.ShellSequence(
#     commands=[
#         util.ShellArg(command=["cd" "arch/arm/boot/dts"]),
#         util.ShellArg(command=["dtc", "-@", "-I", "dts", "-O", "dtb", "-o", ""/home/user01/Linux-Driver-Testing/buildbot/worker_root/worker1/builder_test_linux/build/"", "/home/user01/Linux-Driver-Testing/buildbot/worker_root/worker1/builder_test_linux/build/arch/arm/boot/dts/ti/omap/.am335x-boneblack.dtb.dts.tmp"]),
#     ]))
factory_test_linux.addStep(steps.ShellCommand(command=["dtc", "-@", "-I", "dts", "-O", "dtb", "-o", "/home/user01/Linux-Driver-Testing/buildbot/worker_root/worker1/builder_test_linux/build/arch/arm/boot/dts/ti/omap/am335x-boneblack.dtb", "/home/user01/Linux-Driver-Testing/buildbot/worker_root/worker1/builder_test_linux/build/arch/arm/boot/dts/ti/omap/.am335x-boneblack.dtb.dts.tmp"  ],name="Build device tree source binaries")) 
#dtc -@ -I dts -O dtb -o "arch/arm/boot/dts/ti/omap/am335x-boneblack.dtb" arch/arm/boot/dts/ti/omap/.am335x-boneblack.dtb.dts.tmp

# factory_test_linux.addStep(steps.FileUpload(workersrc="arch/arm/boot/dts/ti/omap/am335x-boneblack.dtb", masterdest="/var/lib/tftpboot/am335x-boneblack.dtb", mode=0o644))
# factory_test_linux.addStep(steps.FileUpload(workersrc="arch/arm/boot/zImage", masterdest="/var/lib/tftpboot/zImage", mode=0o644))

factory_test_linux.addStep(steps.MultipleFileUpload(workersrcs=["arch/arm/boot/dts/ti/omap/am335x-boneblack.dtb", "arch/arm/boot/zImage"],
                                   masterdest="/var/lib/tftpboot/",
                                   mode=0o644,name="Upload compiled binaries to tftp directory"))

c['builders'] = []
# c['builders'].append(
#     util.BuilderConfig(name="runtests",
#       workernames=["worker1"],
#       factory=factory))

c['builders'].append(
    util.BuilderConfig(name="builder_test_linux",
      workernames=["worker1"],
      factory=factory_test_linux))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ROHM Testing"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
