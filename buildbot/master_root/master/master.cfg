# -*- python -*-
# ex: set filetype=python:

import sys 
import os
sys.path.append(os.path.abspath("."))
sys.path.append(os.path.abspath("./secrets"))
sys.path.append(os.path.abspath("./configs"))

from buildbot.plugins import *
from datetime import timedelta

from passwords import *
from factories import *
from projects import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("worker1", worker1pass, max_builds=1)]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

def get_gitpoller(project_name, workdir):
    return changes.GitPoller(
        projects[project_name]['repo_git'],
        project=projects[project_name]['name'],
        workdir=workdir,
        branches=projects[project_name]['branches'],
        pollAtLaunch=True,
        buildPushesWithNoCommits=True,
        pollinterval=projects[project_name]['polling'],
        )

c['change_source'] = []

c['change_source'].append(get_gitpoller('test_linux', 'gitpoller-workdir-test_linux'))
#c['change_source'].append(get_gitpoller('linux-next', 'gitpoller-workdir-linux_next'))
#c['change_source'].append(get_gitpoller('linux_mainline', 'gitpoller-workdir-linux_mainline'))
#c['change_source'].append(get_gitpoller('linux_stable', 'gitpoller-workdir-linux_stable'))
#c['change_source'].append(get_gitpoller('linux_rohm_devel', 'gitpoller-workdir-linux_rohm_devel'))

####### SCHEDULERS

# regex devnotes:
# ^Linux .*\d\.\d.?\.\d.*                           = Linux x.xx.xxxxxx

# ^Linux .*\d\.\d.*                                 = Linux x.xxx
# ^Linux .*6.67|6\.[6-9][8-9].*|[7-9]\.[0-9].*      = Linux 6.67 or bigger

# Configure the Schedulers, which decide how to react to incoming changes.
# ^Linux (5\\.15.*$|[6-9]\\.[0-9]|[6-9]\\.[0-9\\].*$){1,2}(-rc[1-9][0-9]?)?$

import re
def change_commit_is_release(change):
    if re.search('^Linux (5\\.15.*$|[6-9]\\.[0-9]){1,2}(-rc[1-9][0-9]?)?$', change.comments):
        print("Matched commit for release: " + str(change.comments))
        return True

def change_commit_is_next(change):
    if re.search('^Add linux-next specific files for.*', change.comments):
        print("Matched commit for linux next release: " + str(change.comments))
        return True

def get_scheduler(project_name):
    return schedulers.SingleBranchScheduler(
        name=projects[project_name]['scheduler_name'],
	    change_filter=util.ChangeFilter(project=projects[project_name]['name'], branch=projects[project_name]['branches'][0]),
        treeStableTimer=projects[project_name]['treeStableTimer'],
	    builderNames=projects[project_name]['builderNames'],
        )

def get_release_scheduler(project_name):
    return schedulers.SingleBranchScheduler(
        name=projects[project_name]['scheduler_name'],
        fileIsImportant=change_commit_is_release,
	    change_filter=util.ChangeFilter(project=projects[project_name]['name'], branch=projects[project_name]['branches'][0]),
        treeStableTimer=projects[project_name]['treeStableTimer'],
	    builderNames=projects[project_name]['builderNames'],
        )

def get_next_scheduler(project_name):
    return schedulers.SingleBranchScheduler(
        name=projects[project_name]['scheduler_name'],
        fileIsImportant=change_commit_is_next,
	    change_filter=util.ChangeFilter(project=projects[project_name]['name'], branch=projects[project_name]['branches'][0]),
        treeStableTimer=projects[project_name]['treeStableTimer'],
	    builderNames=projects[project_name]['builderNames'],
        )

def get_stable_scheduler(project_name):
    return schedulers.SingleBranchScheduler(
        name=projects[project_name]['scheduler_name'],
        fileIsImportant=change_commit_is_next,
	    change_filter=util.ChangeFilter(project=projects[project_name]['name']),
        treeStableTimer=projects[project_name]['treeStableTimer'],
	    builderNames=projects[project_name]['builderNames'],
        )
c['schedulers'] = []
c['schedulers'].append(get_scheduler('test_linux'))
c['schedulers'].append(get_scheduler('linux_rohm_devel'))
c['schedulers'].append(get_next_scheduler('linux-next'))
c['schedulers'].append(get_release_scheduler('linux_mainline'))
c['schedulers'].append(get_release_scheduler('linux_stable'))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def get_builder(builderName, project_name):
    return util.BuilderConfig(
        name=builderName,
        workernames=projects[project_name]['workerNames'],
        factory=projects[project_name]['factory']
        )

c['builders'] = []
c['builders'].append(get_builder("Test_Linux",'test_linux'))
c['builders'].append(get_builder("linux-next",'linux-next'))
c['builders'].append(get_builder("Linux_Mainline",'linux_mainline'))
c['builders'].append(get_builder("linux-stable",'linux_stable'))
c['builders'].append(get_builder("linux-rohm-devel",'linux_rohm_devel'))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ROHM Testing"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]
generator1 = reporters.BuildStatusGenerator(mode=('failing', 'problem', 'warnings', 'exception','cancelled',))
generator2 = reporters.WorkerMissingGenerator()
mn = reporters.MailNotifier(fromaddr='drivertesting.buildbot@joojoo.com',
                            sendToInterestedUsers=False,
                           # relayhost='localhost',
                            extraRecipients=['drivertesting.buildbot@gmail.com'],
                            generators=[generator1, generator2])
### IRCBOT
irc = reporters.IRC("irc.libera.chat", "LDTreporter",
                 useColors=False,
                 channels=[{"channel": "##mvaittin"}],
                 notify_events=[
#                   'exception',
#                   'problem',
#                   'recovery',
#                   'worker'
                    'success',
                    'failure'
                 ])
c['services'].append(irc)
c['services'].append(mn)
####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
